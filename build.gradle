plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'org.liquibase.gradle' version '2.1.0'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
}

group = 'com.apc.template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "$repository"
        credentials {
            username "$mavenUser"
            password "$mavenPassword"
        }
    }
}

dependencies {
    implementation 'com.apc.commons:ap-commons-ms:0.0.1'

    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.security:spring-security-web:5.7.5'
    implementation 'org.liquibase:liquibase-core:4.17.1'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.5.0'

//    runtimeOnly 'mysql:mysql-connector-java:8.0.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.7.5'

    testImplementation 'org.mockito:mockito-core:4.8.0'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation 'org.yaml:snakeyaml:1.33'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.17.1'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime sourceSets.getByName("main").compileClasspath
    liquibaseRuntime sourceSets.getByName("main").runtimeClasspath
    liquibaseRuntime sourceSets.getByName("main").output
    implementation 'net.lbruun.springboot:preliquibase-spring-boot-starter:1.2.1'

}

Properties props = new Properties()
props.load(new FileInputStream("src/main/resources/application.properties"))

task liquibaseGenerateChangelog(type: JavaExec) {
    group = "liquibase"

    classpath sourceSets.main.runtimeClasspath
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=src/main/resources/db/changelog/versions/db_" + buildTimestamp() + "_changelog.mysql.sql"
    //args "--referenceUrl=hibernate:spring:" + props.getProperty('liquibase.domain.package') + "?dialect=" + props.getProperty('spring.jpa.properties.hibernate.dialect')
    args "--username=" + props.getProperty('spring.datasource.username')
    args "--password=" + props.getProperty('spring.datasource.password')
    args "--url=" + props.getProperty('spring.datasource.url')
    args "--driver=" + props.getProperty('spring.datasource.driverClassName')
    args "generateChangelog"
}

static def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    'com.apc.template.exceptions.*',
                    'com.apc.template.commons.*',
                    'com.apc.template.model.*'
            ]
            limit {
                minimum = 0.20
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

sonarqube {
    properties {
        property "sonar.projectKey", "&projectKey"
        property 'sonar.projectName', '&projectName'
    }
}
