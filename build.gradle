plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'org.liquibase.gradle' version '2.1.0'
}

group = 'com.apc.template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'com.apc.commons:ap-commons-ms:0.0.1-SNAPSHOT'

    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core:4.16.0'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.5.0'

//    runtimeOnly 'mysql:mysql-connector-java:8.0.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.16.0'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.16.0'
    liquibaseRuntime sourceSets.getByName("main").compileClasspath
    liquibaseRuntime sourceSets.getByName("main").runtimeClasspath
    liquibaseRuntime sourceSets.getByName("main").output
    implementation 'net.lbruun.springboot:preliquibase-spring-boot-starter:1.2.1'
}

Properties props = new Properties()
props.load(new FileInputStream("src/main/resources/application.properties"))

task liquibaseGenerateChangelog(type: JavaExec) {
    group = "liquibase"

    classpath sourceSets.main.runtimeClasspath
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=src/main/resources/db/changelog/versions/db_" + buildTimestamp() + "_changelog.mysql.sql"
    //args "--referenceUrl=hibernate:spring:" + props.getProperty('liquibase.domain.package') + "?dialect=" + props.getProperty('spring.jpa.properties.hibernate.dialect')
    args "--username=" + props.getProperty('spring.datasource.username')
    args "--password=" + props.getProperty('spring.datasource.password')
    args "--url=" + props.getProperty('spring.datasource.url')
    args "--driver=" + props.getProperty('spring.datasource.driverClassName')
    args "generateChangelog"
}

static def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

/*liquibase {
    activities {
        generateChangelog {
           username = props.getProperty('spring.datasource.username')
           password = props.getProperty('spring.datasource.password')
           url = props.getProperty('spring.datasource.url')
           driver = props.getProperty('spring.datasource.driverClassName')
           changeLogFile = 'src/main/resources/db/changelog/versions/db_ '+ buildTimestamp() + '_changelog.mysql.sql'
        }
    }

    runList generateChangelog
}*/

tasks.named('test') {
    useJUnitPlatform()
}
